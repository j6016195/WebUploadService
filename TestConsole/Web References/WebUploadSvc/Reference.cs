//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace TestConsole.WebUploadSvc {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebUploadServiceSoap", Namespace="http://tempuri.org/")]
    public partial class WebUploadService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadByBase64StrOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadByByteArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadByUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetResponseContentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginSegmentUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback SegmentUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback SegmentUploadByBase64StrOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndSegmentUploadOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebUploadService() {
            this.Url = global::TestConsole.Properties.Settings.Default.TestConsole_WebUploadSvc_WebUploadService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadByBase64StrCompletedEventHandler UploadByBase64StrCompleted;
        
        /// <remarks/>
        public event UploadByByteArrayCompletedEventHandler UploadByByteArrayCompleted;
        
        /// <remarks/>
        public event UploadByUrlCompletedEventHandler UploadByUrlCompleted;
        
        /// <remarks/>
        public event SetResponseContentTypeCompletedEventHandler SetResponseContentTypeCompleted;
        
        /// <remarks/>
        public event BeginSegmentUploadCompletedEventHandler BeginSegmentUploadCompleted;
        
        /// <remarks/>
        public event SegmentUploadCompletedEventHandler SegmentUploadCompleted;
        
        /// <remarks/>
        public event SegmentUploadByBase64StrCompletedEventHandler SegmentUploadByBase64StrCompleted;
        
        /// <remarks/>
        public event EndSegmentUploadCompletedEventHandler EndSegmentUploadCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadByBase64Str", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadByBase64Str(string attachName, string base64Str) {
            object[] results = this.Invoke("UploadByBase64Str", new object[] {
                        attachName,
                        base64Str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadByBase64StrAsync(string attachName, string base64Str) {
            this.UploadByBase64StrAsync(attachName, base64Str, null);
        }
        
        /// <remarks/>
        public void UploadByBase64StrAsync(string attachName, string base64Str, object userState) {
            if ((this.UploadByBase64StrOperationCompleted == null)) {
                this.UploadByBase64StrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadByBase64StrOperationCompleted);
            }
            this.InvokeAsync("UploadByBase64Str", new object[] {
                        attachName,
                        base64Str}, this.UploadByBase64StrOperationCompleted, userState);
        }
        
        private void OnUploadByBase64StrOperationCompleted(object arg) {
            if ((this.UploadByBase64StrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadByBase64StrCompleted(this, new UploadByBase64StrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadByByteArray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadByByteArray(string attachName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content) {
            object[] results = this.Invoke("UploadByByteArray", new object[] {
                        attachName,
                        content});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadByByteArrayAsync(string attachName, byte[] content) {
            this.UploadByByteArrayAsync(attachName, content, null);
        }
        
        /// <remarks/>
        public void UploadByByteArrayAsync(string attachName, byte[] content, object userState) {
            if ((this.UploadByByteArrayOperationCompleted == null)) {
                this.UploadByByteArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadByByteArrayOperationCompleted);
            }
            this.InvokeAsync("UploadByByteArray", new object[] {
                        attachName,
                        content}, this.UploadByByteArrayOperationCompleted, userState);
        }
        
        private void OnUploadByByteArrayOperationCompleted(object arg) {
            if ((this.UploadByByteArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadByByteArrayCompleted(this, new UploadByByteArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadByUrl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadByUrl(string attachName, string url) {
            object[] results = this.Invoke("UploadByUrl", new object[] {
                        attachName,
                        url});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadByUrlAsync(string attachName, string url) {
            this.UploadByUrlAsync(attachName, url, null);
        }
        
        /// <remarks/>
        public void UploadByUrlAsync(string attachName, string url, object userState) {
            if ((this.UploadByUrlOperationCompleted == null)) {
                this.UploadByUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadByUrlOperationCompleted);
            }
            this.InvokeAsync("UploadByUrl", new object[] {
                        attachName,
                        url}, this.UploadByUrlOperationCompleted, userState);
        }
        
        private void OnUploadByUrlOperationCompleted(object arg) {
            if ((this.UploadByUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadByUrlCompleted(this, new UploadByUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetResponseContentType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetResponseContentType(string transCode, string responseContentType) {
            object[] results = this.Invoke("SetResponseContentType", new object[] {
                        transCode,
                        responseContentType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetResponseContentTypeAsync(string transCode, string responseContentType) {
            this.SetResponseContentTypeAsync(transCode, responseContentType, null);
        }
        
        /// <remarks/>
        public void SetResponseContentTypeAsync(string transCode, string responseContentType, object userState) {
            if ((this.SetResponseContentTypeOperationCompleted == null)) {
                this.SetResponseContentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetResponseContentTypeOperationCompleted);
            }
            this.InvokeAsync("SetResponseContentType", new object[] {
                        transCode,
                        responseContentType}, this.SetResponseContentTypeOperationCompleted, userState);
        }
        
        private void OnSetResponseContentTypeOperationCompleted(object arg) {
            if ((this.SetResponseContentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetResponseContentTypeCompleted(this, new SetResponseContentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BeginSegmentUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginSegmentUpload(string attachName, int contentSize) {
            object[] results = this.Invoke("BeginSegmentUpload", new object[] {
                        attachName,
                        contentSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginSegmentUploadAsync(string attachName, int contentSize) {
            this.BeginSegmentUploadAsync(attachName, contentSize, null);
        }
        
        /// <remarks/>
        public void BeginSegmentUploadAsync(string attachName, int contentSize, object userState) {
            if ((this.BeginSegmentUploadOperationCompleted == null)) {
                this.BeginSegmentUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginSegmentUploadOperationCompleted);
            }
            this.InvokeAsync("BeginSegmentUpload", new object[] {
                        attachName,
                        contentSize}, this.BeginSegmentUploadOperationCompleted, userState);
        }
        
        private void OnBeginSegmentUploadOperationCompleted(object arg) {
            if ((this.BeginSegmentUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginSegmentUploadCompleted(this, new BeginSegmentUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SegmentUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SegmentUpload(string attachId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] segmentContent, int sortNo) {
            object[] results = this.Invoke("SegmentUpload", new object[] {
                        attachId,
                        segmentContent,
                        sortNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SegmentUploadAsync(string attachId, byte[] segmentContent, int sortNo) {
            this.SegmentUploadAsync(attachId, segmentContent, sortNo, null);
        }
        
        /// <remarks/>
        public void SegmentUploadAsync(string attachId, byte[] segmentContent, int sortNo, object userState) {
            if ((this.SegmentUploadOperationCompleted == null)) {
                this.SegmentUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSegmentUploadOperationCompleted);
            }
            this.InvokeAsync("SegmentUpload", new object[] {
                        attachId,
                        segmentContent,
                        sortNo}, this.SegmentUploadOperationCompleted, userState);
        }
        
        private void OnSegmentUploadOperationCompleted(object arg) {
            if ((this.SegmentUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SegmentUploadCompleted(this, new SegmentUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SegmentUploadByBase64Str", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SegmentUploadByBase64Str(string attachId, string base64Str, int sortNo) {
            object[] results = this.Invoke("SegmentUploadByBase64Str", new object[] {
                        attachId,
                        base64Str,
                        sortNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SegmentUploadByBase64StrAsync(string attachId, string base64Str, int sortNo) {
            this.SegmentUploadByBase64StrAsync(attachId, base64Str, sortNo, null);
        }
        
        /// <remarks/>
        public void SegmentUploadByBase64StrAsync(string attachId, string base64Str, int sortNo, object userState) {
            if ((this.SegmentUploadByBase64StrOperationCompleted == null)) {
                this.SegmentUploadByBase64StrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSegmentUploadByBase64StrOperationCompleted);
            }
            this.InvokeAsync("SegmentUploadByBase64Str", new object[] {
                        attachId,
                        base64Str,
                        sortNo}, this.SegmentUploadByBase64StrOperationCompleted, userState);
        }
        
        private void OnSegmentUploadByBase64StrOperationCompleted(object arg) {
            if ((this.SegmentUploadByBase64StrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SegmentUploadByBase64StrCompleted(this, new SegmentUploadByBase64StrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EndSegmentUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EndSegmentUpload(string attachId) {
            object[] results = this.Invoke("EndSegmentUpload", new object[] {
                        attachId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EndSegmentUploadAsync(string attachId) {
            this.EndSegmentUploadAsync(attachId, null);
        }
        
        /// <remarks/>
        public void EndSegmentUploadAsync(string attachId, object userState) {
            if ((this.EndSegmentUploadOperationCompleted == null)) {
                this.EndSegmentUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndSegmentUploadOperationCompleted);
            }
            this.InvokeAsync("EndSegmentUpload", new object[] {
                        attachId}, this.EndSegmentUploadOperationCompleted, userState);
        }
        
        private void OnEndSegmentUploadOperationCompleted(object arg) {
            if ((this.EndSegmentUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndSegmentUploadCompleted(this, new EndSegmentUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UploadByBase64StrCompletedEventHandler(object sender, UploadByBase64StrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadByBase64StrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadByBase64StrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UploadByByteArrayCompletedEventHandler(object sender, UploadByByteArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadByByteArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadByByteArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UploadByUrlCompletedEventHandler(object sender, UploadByUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadByUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadByUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetResponseContentTypeCompletedEventHandler(object sender, SetResponseContentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetResponseContentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetResponseContentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void BeginSegmentUploadCompletedEventHandler(object sender, BeginSegmentUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginSegmentUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginSegmentUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SegmentUploadCompletedEventHandler(object sender, SegmentUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SegmentUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SegmentUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SegmentUploadByBase64StrCompletedEventHandler(object sender, SegmentUploadByBase64StrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SegmentUploadByBase64StrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SegmentUploadByBase64StrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void EndSegmentUploadCompletedEventHandler(object sender, EndSegmentUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndSegmentUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndSegmentUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591